SDCS
CGI SSDS interface

Version 1.0 May 3, 2009

Overview
The SSDS system permits a simple process variable database to be set up for
a small embedded system.
This allows a shard memory system to be set up to permit values to be
used by system applicatons and monitired by snmp and web based cgi.

This document describes the web based interface.

The interface attempts to provide a flexible means to create web pages that
can interact with the database to view database items.


>>>>>>>>>>>Database overview reminder start

The simple (SSDS) database consists of a number of named classes.
A Class will contain named fields to hold data.
These fields can (currenty) be of int, float or text type.
A named item is created as an instance of a class.

The item will hold values for each of the class fields.

The actual database consists of two shared memory areas.
One contains the data base definitions describing the layout of the classes
fields and items.
The other shared memory area is simply the raw data used by the system.

The system has a socket/network access generated by the ssds_server.

This will use a configuration file to describe the initial database.

  - created named classes
  - add any number of named fields to each class
  - create any number of named items (instances) of each class.

The socket system allows a serialized access to the main database.
As each application wishes to view or modify database components
a message is sent to the database server. These messages are all processed
in sequence by the server.

The messages contain an 8 byte key+length field.
This allows the tcpip system to first receive the 8 byte key and then ensure
that the whole message block sent by a client is processed before servicing the
next client.

Each class, field or item is given a name, and an ID.
In addition fields are given a type and a length (for text type)

An action message consists of a number of text seperated by a ':'

For example this string will add a field called NewInt of type int to the
class MyClass.
Both the class and the field definitions will be created in the database definitions.

class:MyClass:field:NewInt:type:int:action:add_field:


This string will create an item or an instance of the new class.

class:MyClass:item:Item1:action:add_item:

>>>>>>>>>>>Database overview reminder end

The CGI system requirements:
 * to interface with the ssds_server socket
 * to allow web pages to be defined to show database classes fields and items.
 * to allow lists of items to be generated.
 * to allow interaction with forms and recovery of form data.
 * to display multiple different web pages
 * to be easy to extend and modify by the user.

A brief description of the requirements follows

Interface with the ssds_server.

The server must be running for the cgi operations and interfaces to work.
This interface is automatic.

Web Page Definitions.
=====================

The system uses a series of token substitutions to allow the user to easily
create web page template files.

For example a
@@num_classes@@ token could be used to display the number of classes
defined in the database.

Lists and Tables
================

If you need to display a list of possible classes you will need to
start the list and repeat some code for each class.
The "xxx_start" and "xxx_end" tokens will trigger loops to iterate or repeat
blocks of output for each class, field , or item.


Consider the following example

 <p>  We start here @@class_start@@
 <p>  it has @@num_classes@@ classes
 <p>  here are the classes by name
 <ul>
@@class_start@@
<li>@@class_name@@
@@class_end@@
</ul>

This will show the number of classes contained in the database
followed by a list of the class names.
Note that the http keys <p> , <ul> , <li> etc can be freely used
in the system together with the system tokens

As each class has one or more fields a sub list of fields can be
also added after the class name.

   <ul>
   @@class_fields_start@@
   <li>@@field_name@@
   @@class_fileds_end@@
   </ul>


The  '_start' and '_end' tokens allow a flexible way to automatically create
lists.
Class, Field and item lists can all be embedded.
So you can for example
   start with a list of classes
      display a list of items for each class
       display a list of fields for each item.


It is relatively easy to add extra tokens and token substitutions
to the system.


Interface with forms and cgi data.
If a form is to be generated you will need to use hidden
named fields to maintain the context of the form item.
( as normal with this sort of system )

Each  class , field , and item can be refered to by list number
when presenting a list of items.
Thes list number can then be used to identify the item, field and class
for any data.

CGI data

This is passed to the CGI application in the form of the "QUERY_STRING"
environment variable.


The systm has a parser to detect any items in the  Environment Data.

@@query_foo@@
 will recover the value of foo in the following http request

http://localhost:80/cgi-bin/ssds_cgi?foo=1234

In this case @@query_foo@@ will be replaced by the string "123"

***TODO*** add html escape removal for cgi vars***


CGI action , forms
The system will react to certain data items in the query string.

One obvoius action would be to change the web file template.

http://localhost:80/cgi-bin/ssds_cgi?file=class_list.txt

Another action would be send a message to the server.


http://localhost:80/cgi-bin/ssds_cgi?action=class:MyClass:item:Item1:action:add_item:

In this case the system will send a message directly to the server.
The response will be in the form of a ':' seperated string.
This return will be displayed for the user.

Update 0504

 Set_value now working
 POST option working
